#+TITLE: INFO-F-403 -- Project
#+AUTHOR: Vadim Baele -- Quentin Stievenart
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t todo:nil
#+LATEX_HEADER: \usepackage[a4paper]{geometry}
#+LATEX_HEADER: \geometry{hscale=0.7,vscale=0.7,centering}
#+LATEX_HEADER: \usepackage[pdftex]{hyperref}
#+LATEX_HEADER: \hypersetup{colorlinks,citecolor=black,filecolor=black,linkcolor=black,urlcolor=black}
#+LATEX_HEADER: \usepackage{syntax}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{etoolbox} % for patching
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: % define the main command on the model of the original one
#+LATEX_HEADER: % we add stepping the counter and typesetting the number
#+LATEX_HEADER: \def\gr@implnumbereditem<#1> #2 {%
#+LATEX_HEADER:   \stepcounter{grammarline}%
#+LATEX_HEADER:   \sbox\z@{\hskip\labelsep\grammarlabel{#1}{#2}}
#+LATEX_HEADER:   \strut\@@par%
#+LATEX_HEADER:   \vskip-\parskip%
#+LATEX_HEADER:   \vskip-\baselineskip%
#+LATEX_HEADER:   \hrule\@height\z@\@depth\z@\relax%
#+LATEX_HEADER:   \item[%
#+LATEX_HEADER:     \rlap{\hskip\dimexpr\linewidth+\grammarindent\relax %% add the number
#+LATEX_HEADER:           \llap{(\thegrammarline)}}%
#+LATEX_HEADER:     \unhbox\z@]%
#+LATEX_HEADER:   \catcode`\<\active%
#+LATEX_HEADER: }
#+LATEX_HEADER: % copy the grammar environment under a new name
#+LATEX_HEADER: \let\numberedgrammar\grammar
#+LATEX_HEADER: \let\endnumberedgrammar\endgrammar
#+LATEX_HEADER: % now patch the new environment
#+LATEX_HEADER: \pretocmd\numberedgrammar{\setcounter{grammarline}{0}}{}{}
#+LATEX_HEADER: \patchcmd\numberedgrammar
#+LATEX_HEADER:   {\gr@implitem}
#+LATEX_HEADER:   {\gr@implnumbereditem}
#+LATEX_HEADER:   {}{}
#+LATEX_HEADER: \patchcmd\numberedgrammar
#+LATEX_HEADER:   {\def\alt{\\\llap{\textbar\quad}}}
#+LATEX_HEADER:   {\let\alt\alt@num}
#+LATEX_HEADER:   {}{}
#+LATEX_HEADER: 
#+LATEX_HEADER: % the command for numbering the \alt lines
#+LATEX_HEADER: \def\alt@num{\\\relax
#+LATEX_HEADER:   \stepcounter{grammarline}%
#+LATEX_HEADER:   \rlap{\hskip\dimexpr\linewidth-\labelwidth+\grammarindent-\labelsep\relax
#+LATEX_HEADER:         \llap{(\thegrammarline)}}% add the number
#+LATEX_HEADER:   \llap{\textbar\quad}}
#+LATEX_HEADER: 
#+LATEX_HEADER: \newcounter{grammarline}
#+LATEX_HEADER: \makeatother
The purpose of this project is to develop a compiler for a simplified
version of Perl, that compiles to ARM assembler, in order to be able
to execute compiled Perl code on Android devices. The simplified
version of Perl to be implemented is described in the project statement.
* Lexer
** Lexical Units
The lexical units of this simplified version of Perl are given here,
with their regular expression and and  the corresponding token used in
the implementation. While each of the lexical unit have a
different token name, some are grouped into categories for a matter of
clarity.

  - *Symbols*:
    - ={=: =LBRACE=
    - =}=: =RBRACE=
    - =(=: =LPAR=
    - =)=: =RPAR=
    - =;=: =SEMICOLON=
    - \texttt{,}: =COMMA=
    - =&=: =CALL_MARK=
    - \texttt{\=}: =ASSIGN=
  - *Operators*:
    - =+=: =PLUS=
    - =-=: =MINUS=
    - =*=: =TIMES=
    - =/=: =DIVIDE=
    - =||=: =LAZY_OR=
    - =&&=: =LAZY_AND=
    - \texttt{\=\=}: =EQUALS=
    - \texttt{!=}: =DIFFERENT=
    - =>=: =GREATER=
    - =<=: =LOWER=
    - \texttt{>=}: =GREATER_EQUALS=
    - \texttt{<=}: =LOWER_EQUALS=
    - =eq=: =STRING_EQUALS=
    - =ne=: =STRING_DIFFERENT=
    - =gt=: =STRING_GREATER=
    - =ge=: =STRING_GREATER_EQUALS=
    - =lt=: =STRING_LOWER=
    - =le=: =STRING_LOWER_EQUALS=
    - =not=: =NOT_WORD=
    - =!=: =NOT=
  - *Keywords*:
    - =if=: =IF=
    - =unless=: =UNLESS=
    - =else=: =ELSE=
    - =elsif=: =ELSEIF=
    - =return=: =RETURN=
    - =sub=: =SUB=
  - *Integer*: =[0-9]+=: =INTEGER=
  - *String*: =("[^"]"|'[^']')=: =STRING=
  - *Identifier*: =[a-zA-Z][a-zA-Z0-9]*=: =IDENTIFIER=
  - *Variable*: =$[a-zA-Z0-9]+=: =VARIABLE=
** Deterministic Finite Automaton
The DFA is divided in multiple figure for a matter of clarity. All the
following figures have the same start state, and some refer to the
special state =to identifier=, which /redirects/ the DFA into the
corresponding figure. The accepting states are represented with states
with dashed lines.

\begin{figure}
\centerline{\includegraphics[width=0.7\textwidth]{dfa.png}}
\caption{DFA for single character symbols, spaces and comments}
\end{figure}

\begin{figure}
\centerline{\includegraphics[width=0.7\textwidth]{dfa-multi-char-sym.png}}
\caption{DFA for multi-character symbols}
\end{figure}

\begin{figure}
\centerline{\includegraphics[width=0.7\textwidth]{dfa-int-string.png}}
\caption{DFA for integer and strings}
\end{figure}

\begin{figure}
\centerline{\includegraphics[width=0.7\textwidth]{dfa-var-identifier.png}}
\caption{DFA for variables and identifiers}
\end{figure}

\begin{figure}
\centerline{\includegraphics[width=1.45\textwidth]{dfa-keywords.png}}
\caption{DFA for keywords}
\end{figure}

\begin{figure}
\centerline{\includegraphics[width=\textwidth]{dfa-e.png}}
\caption{DFA for keywords starting with \texttt{e}}
\end{figure}

** Implementation
The different tokens are defined as a type (in =token.ml=). The lexer
(or scanner) is implemented in =hand_lexer.ml= and its implementation
is a simple translation from the DFA to OCaml code, which looks the
next character from the input stream and goes to the corresponding
state. The main function of the lexer has the following type
signature:

#+BEGIN_SRC caml
val lex : in_channel -> (string, token) either Stream.t
#+END_SRC

Which means that the lexer reads its input from an input channel
(=stdin= or a file), and it outputs a stream of =(string, token)
either=, meaning that the stream can contain either a token, or a
string (which describes a lexing error).

Another lexer is implemented with Ocamllex, in =ocamllex_lexer.ml=,
and the user can choose between the two implementations using the =-l=
flag when calling the compiler.
* Parser
** Modified grammar
The grammar used is a modification of the first grammar given (in the
project statement). This modified is given below.

\setlength{\grammarparsep}{20pt plus 1pt minus 1pt}
\setlength{\grammarindent}{12em}
\begin{grammar}
\input{grammar.tex}
\end{grammar}

The differences between this grammar and the grammar given in the
project's statement are the following:
  - =<program>=: a program should consist first of the function
    definition and then of the program instruction, else it would
    cause problems in the parsing table
  - =<instr list>=: every instruction has to end with a semicolon,
    else the first and follow sets of every non-terminals would be
    really big and the chances of having a conflict would grow. This
    implies a major difference with Perl: conditions also have to end
    with a semicolon, for example: =if … { … };=
  - =<funcall>=: functions can now be called without being prefixed by a
    =&=
  - =<funcall args>=: function calls now have mandatory parentheses,
    to avoid conflicts (this conflict should however not arise, due to
    the mandatory semicolon, but this change was made before)
  - =<instr>= and =<cond>=: post-condition forms are now in the
    non-terminal =<instr>=, to avoid conflicts (since now =<cond>=
    cannot start with an =<expr>=, which conflicted with the fact that
    =<instr>= can start with an =<expr>=)
  - =<instr>=: an assignation is now an instruction instead of an
    expression, which makes more sense
  - =<cond end>=: the =else= branch was incorrect
  - =<expr>=: the old =<expr>= non-terminal has been splitted in
    multiple non-terminals in order to respect the operators'
    precedences

** LL(1) grammar \label{sec:LL}
The grammar has been converted to a LL(1) grammar by
eliminating left-recursion, and the result is given below. A =<S>=
non-terminal symbol has been added to handle the =EOF= character,
needed to properly implement the grammar.

\setlength{\grammarparsep}{20pt plus 1pt minus 1pt}
\setlength{\grammarindent}{12em}
\begin{numberedgrammar}
\input{grammar-ll1.tex}
\end{numberedgrammar}

** First and follows
The /first/ and /follow/ sets of the different non-terminal symbol are
given below.

\setlength{\grammarparsep}{20pt plus 1pt minus 1pt}
\setlength{\grammarindent}{12em}
\begin{grammar}
\input{first-follow.tex}
\end{grammar}
** Parsing Table
The parsing table for the LL(1) grammar is given in tables
\ref{tbl:ParsingTable1}, \ref{tbl:ParsingTable2} and \ref{tbl:ParsingTable3}.

\footnotesize
#+CAPTION: Parsing table (1)
#+LABEL: tbl:ParsingTable1
#+ATTR_LaTeX: longtable align=|l||c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|
|                   | var | integer | string | identifier | sub | return |  & |  { |  } |  ( |  ) |  ; |  , |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <S>               |     |       1 |      1 |          1 |   1 |      1 |  1 |  1 |    |  1 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <program>         |   3 |       3 |      3 |          3 |   2 |      3 |  3 |  3 |    |  3 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <program'>        |   4 |       4 |      4 |          4 |     |      4 |  4 |  4 |    |  4 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <function list>   |     |         |        |            |   6 |        |    |    |    |    |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <function list'>  |   8 |       8 |      8 |          8 |   7 |      8 |  8 |  8 |    |  8 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <function>        |     |         |        |            |   9 |        |    |    |    |    |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <function args>   |     |         |        |            |     |        |    | 11 |    | 10 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <arg list>        |  12 |         |        |            |     |        |    |    |    |    | 13 |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <arg list'>       |     |         |        |            |     |        |    |    |    |    | 15 |    | 14 |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <instr list>      |  16 |      16 |     16 |         16 |     |     16 | 16 | 17 |    | 16 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <instr list'>     |  18 |      18 |     18 |         18 |     |     18 | 18 |    | 19 | 18 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <funcall>         |     |         |        |         21 |     |        | 20 |    |    |    |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <funcall args>    |     |         |        |            |     |        |    |    |    | 22 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <args call list>  |  23 |      23 |     23 |         23 |     |     23 | 23 |    |    | 23 | 24 |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <args call list'> |     |         |        |            |     |        |    |    |    |    | 26 |    | 25 |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <instr>           |  28 |      28 |     28 |         28 |     |     29 | 28 |    |    | 28 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <instr'>          |     |         |        |            |     |        |    |    |    |    | 33 | 33 | 33 |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <cond>            |     |         |        |            |     |        |    |    |    |    |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <cond end>        |     |         |        |            |     |        |    |    |    |    | 38 | 38 | 38 |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <simple expr>     |  40 |      41 |     42 |         39 |     |        | 39 |    |    |    |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <expr>            |  44 |      44 |     44 |         44 |     |        | 44 |    |    | 44 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <expr-or>         |  45 |      45 |     45 |         45 |     |        | 45 |    |    | 45 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <expr-or'>        |     |         |        |            |     |        |    | 47 |    |    | 47 | 47 | 47 |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <expr-and>        |  48 |      48 |     48 |         48 |     |        | 48 |    |    | 48 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <expr-and'>       |     |         |        |            |     |        |    | 50 |    |    | 50 | 50 | 50 |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <expr-eq>         |  51 |      51 |     51 |         51 |     |        | 51 |    |    | 51 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <expr-eq'>        |     |         |        |            |     |        |    | 56 |    |    | 56 | 56 | 56 |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <comp>            |  57 |      57 |     57 |         57 |     |        | 57 |    |    | 57 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <comp'>           |     |         |        |            |     |        |    | 66 |    |    | 66 | 66 | 66 |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <calc>            |  67 |      67 |     67 |         67 |     |        | 67 |    |    | 67 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <calc'>           |     |         |        |            |     |        |    | 71 |    |    | 71 | 71 | 71 |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <term>            |  72 |      72 |     72 |         72 |     |        | 72 |    |    | 72 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <term'>           |     |         |        |            |     |        |    | 75 |    |    | 75 | 75 | 75 |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|
| <factor>          |  76 |      76 |     76 |         76 |     |        | 76 |    |    | 80 |    |    |    |
|-------------------+-----+---------+--------+------------+-----+--------+----+----+----+----+----+----+----|

#+LATEX: \footnotesize
#+CAPTION: Parsing table (2)
#+LABEL: tbl:ParsingTable2
#+ATTR_LaTeX: longtable align=|l||c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|
|                   | if | unless | else | elsif | not |  ! |  + |  - |  * |  / |  = |  . | or | && |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <S>               |  1 |      1 |      |       |   1 |  1 |  1 |    |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <program>         |  3 |      3 |      |       |   3 |  3 |  3 |  3 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <program'>        |  4 |      4 |      |       |   4 |  4 |  4 |  4 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <function list>   |    |        |      |       |     |    |    |    |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <function list'>  |  8 |      8 |      |       |   8 |  8 |  8 |  8 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <function>        |    |        |      |       |     |    |    |    |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <function args>   |    |        |      |       |     |    |    |    |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <arg list>        |    |        |      |       |     |    |    |    |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <arg list'>       |    |        |      |       |     |    |    |    |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <instr list>      | 16 |     16 |      |       |  16 | 16 | 16 | 16 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <instr list'>     | 18 |     18 |      |       |  18 | 18 | 18 | 18 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <funcall>         |    |        |      |       |     |    |    |    |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <funcall args>    |    |        |      |       |     |    |    |    |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <args call list>  | 23 |     23 |      |       |  23 | 23 | 23 | 23 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <args call list'> |    |        |      |       |     |    |    |    |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <instr>           | 27 |     27 |      |       |  28 | 28 | 28 | 28 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <instr'>          | 31 |     32 |      |       |     |    |    |    |    |    | 30 |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <cond>            | 34 |     35 |      |       |     |    |    |    |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <cond end>        |    |        |   36 |    37 |     |    |    |    |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <simple expr>     |    |        |      |       |     |    |    |    |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <expr>            |    |        |      |       |  43 | 44 | 44 | 44 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <expr-or>         |    |        |      |       |     | 45 | 45 | 45 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <expr-or'>        | 47 |     47 |      |       |     |    |    |    |    |    | 47 |    | 46 |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <expr-and>        |    |        |      |       |     | 48 | 48 | 48 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <expr-and'>       | 50 |     50 |      |       |     |    |    |    |    |    | 50 |    | 50 | 49 |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <expr-eq>         |    |        |      |       |     | 51 | 51 | 51 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <expr-eq'>        | 56 |     56 |      |       |     |    |    |    |    |    | 56 |    | 56 | 56 |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <comp>            |    |        |      |       |     | 57 | 57 | 57 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <comp'>           | 66 |     66 |      |       |     |    |    |    |    |    | 66 |    | 66 | 66 |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <calc>            |    |        |      |       |     | 67 | 67 | 67 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <calc'>           | 71 |     71 |      |       |     |    | 68 | 69 |    |    | 71 | 70 | 71 | 71 |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <term>            |    |        |      |       |     | 72 | 72 | 72 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <term'>           | 75 |     75 |      |       |     |    | 75 | 75 | 73 | 74 | 75 | 75 | 75 | 75 |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|
| <factor>          |    |        |      |       |     | 77 | 78 | 79 |    |    |    |    |    |    |
|-------------------+----+--------+------+-------+-----+----+----+----+----+----+----+----+----+----|

#+LATEX: \footnotesize
#+CAPTION: Parsing table (3)
#+LABEL: tbl:ParsingTable3
#+ATTR_LaTeX: longtable align=|l||c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|
|                   | == | != |  > |  < | >= | <= | eq | ne | gt | lt | ge | le | EOF |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <S>               |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <program>         |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <program'>        |    |    |    |    |    |    |    |    |    |    |    |    |   5 |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <function list>   |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <function list'>  |    |    |    |    |    |    |    |    |    |    |    |    |   8 |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <function>        |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <function args>   |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <arg list>        |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <arg list'>       |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <instr list>      |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <instr list'>     |    |    |    |    |    |    |    |    |    |    |    |    |  19 |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <funcall>         |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <funcall args>    |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <args call list>  |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <args call list'> |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <instr>           |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <instr'>          |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <cond>            |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <cond end>        |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <simple expr>     |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <expr>            |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <expr-or>         |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <expr-or'>        |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <expr-and>        |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <expr-and'>       |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <expr-eq>         |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <expr-eq'>        | 52 | 53 |    |    |    |    | 54 | 55 |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <comp>            |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <comp'>           | 66 | 66 | 58 | 59 | 60 | 61 | 66 | 66 | 63 | 62 | 65 | 64 |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <calc>            |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <calc'>           | 71 | 71 | 71 | 71 | 71 | 71 | 71 | 71 | 71 | 71 | 71 | 71 |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <term>            |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <term'>           | 75 | 75 | 75 | 75 | 75 | 75 | 75 | 75 | 75 | 75 | 75 | 75 |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|
| <factor>          |    |    |    |    |    |    |    |    |    |    |    |    |     |
|-------------------+----+----+----+----+----+----+----+----+----+----+----+----+-----|

** Grammar decoration
The grammar has been decorated to produce an abstract syntax tree. The
decoration of the grammar is given below (the numbers corresponds to
the rules of the grammar given in section \ref{sec:LL}), where =[]=
corresponds to the empty list, and =::= is the /cons/ operation (which
creates a list from a head and a tail). =inh= is an inherited
attribute, while =node= is a synthesized attribute. When a
non-terminal has the same name on the left-hand side and right-hand
side of one rule, those in the right-hand side are numbered
left-to-right, while the one on the left-hand side remains the same.

The resulting abstract syntax tree can then be converted to assembly
code, which is described in section \ref{sec:Codegen}.

  1. =<S>.node= = =<program>.node=
  2. =<program>.node= = =(<function list>.node, <program'>.node)=
  3. =<program>.node= = =([], <instr list>.node)=
  4. =<program'>.node= = =<instr list>.node=
  5. =<program'>.node= = =[]=
  6. =<function list>.node= = =<function>.node :: <function list'>.node=
  7. =<function list'>.node= = =<function>.node :: <function list'>.node=
  8. =<function list'>.node= = =[]=
  9. =<function>.node= = =Fundef(identifier.entry, <function args>.node, <instr list>.node=
  10. =<function args>.node= = =<arg list>.node=
  11. =<function args>.node= = =[]=
  12. =<arg list>.node= = =var.entry :: <arg list'>.node=
  13. =<arg list>.node= = =[]=
  14. =<arg list'>.node= = =var.entry :: <arg list'>.node=
  15. =<arg list'>.node= = =[]=
  16. =<instr list>.node= = =<instr>.node :: <instr list'>.node=
  17. =<instr list>.node= = =<instr list>.node=
  18. =<instr list'>.node= = =<instr>.node :: <instr list'>.node=
  19. =<instr list>.node= = =[]=
  20. =<funcall>.node= = =Funcall(identifier.entry, <funcall args>.node)=
  21. =<funcall>.node= = =Funcall(identifier.entry, <funcall args>.node)=
  22. =<funcall args>.node= = =<args call list>.node=
  23. =<args call list>.node= = =<instr>.node :: <args call list'>.node=
  24. =<args call list>.node= = =[]=
  25. =<args call list'>.node= = =<instr>.node :: <args call list'>.node=
  26. =<args call list'>.node= = =[]=
  27. =<instr>.node= = =<cond>.node=
  28. =<instr'>.inh= = =<expr.node>=
      =<instr>.node= = =<instr'>.node=
  29. =<instr>.node= = =Return(<expr>.node)=
  30. =<instr'>.node= = =Assign (<instr'>.inh.variable, <expr>.node)=
  31. =<instr'>.node= = =Cond(<expr>.node, [<instr'>.inh], CondEnd)=
  32. =<instr'>.node= = =Cond(UnOp(Not, <expr>.node), [<instr'>.inh], CondEnd)=
  33. =<instr'>.node= = =<instr'>.inh=
  34. =<cond>.node= = =Cond(<expr>.node, <instr list>.node, <cond end>.node=
  35. =<cond>.node= = =Cond(UnOp(Not, <expr>.node), <instr list>.node, <cond end>.node=
  36. =<cond end>.node= = =Cond(Value True, <instr list>.node, CondEnd)=
  37. =<cond end>.node= = =Cond(<expr>.node, <instr list>.node, <cond end>.node)=
  38. =<cond end>.node= = =CondEnd=
  39. =<simple expr>.node= = =<funcall>.node=
  40. =<simple expr>.node= = =Variable var.entry=
  41. =<simple expr>.node= = =Value integer.entry=
  42. =<simple expr>.node= = =Value string.entry=
  43. =<expr>.node= = =UnOp(Not, <expr>.node)=
  44. =<expr>.node= = =<expr-or>.node=
  45. =<expr-or'>.inh= = =<expr-and>.node= \\
      =<expr-or>.node= = =<expr-or'>.node=
  46. =<expr-or'>= $_1$ =.inh= = =Or(<expr-or'>.inh  <expr-and>.node)= \\
      =<expr-or'>.node= = =<expr-or'>= $_1$ =.node=
  47. =<expr-or'>.node= = =<expr-or'>.inh=
  48. =<expr-and'>.inh= = =<expr-eq>.node= \\
      =<expr-and>.node= = =<expr-and'>.node=
  49. =<expr-and'>= $_1$ =.inh= = =And(<expr-and'>.inh, <expr-eq>.node>)= \\
      =<expr-and'>.node= = =<expr-and'>= $_1$ =.node=
  50. =<expr-and'>.node= = =<expr-and'>.inh=
  51. =<expr-eq'>.inh= = =<comp>.node= \\
      =<expr-eq>.node== = =<expr-eq'>.node=
  52. =<expr-eq'>.node= = =BinOp(Equals, <expr-eq'>.inh, <expr-eq'>= $_1$ =.node)=
  53. =<expr-eq'>.node= = =BinOp(Different, <expr-eq'>.inh, <expr-eq'>= $_1$ =.node)=
  54. =<expr-eq'>.node= = =BinOp(StrEquals, <expr-eq'>.inh, <expr-eq'>= $_1$ =.node)=
  55. =<expr-eq'>.node= = =BinOp(StrDifferent, <expr-eq'>.inh, <expr-eq'>= $_1$ =.node)=
  56. =<expr-eq'>.node= = =<expr-eq'>.inh=
  57. =<comp'>.inh= = =<calc>.node= \\
      =<comp>.node= = =<comp'>.node=
  58. =<comp'>= $_1$ =.inh= = =BinOp(Greater, <comp'>.inh, <calc>.node)= \\
      =<comp'>.node= = =<comp'>= $_1$ =.node=
  59. =<comp'>= $_1$ =.inh= = =BinOp(Lower, <comp'>.inh, <calc>.node)= \\
      =<comp'>.node= = =<comp'>= $_1$ =.node=
  60. =<comp'>= $_1$ =.inh= = =BinOp(GreaterEquals, <comp'>.inh, <calc>.node)= \\
      =<comp'>.node= = =<comp'>= $_1$ =.node=
  61. =<comp'>= $_1$ =.inh= = =BinOp(LowerEquals, <comp'>.inh, <calc>.node)= \\
      =<comp'>.node= = =<comp'>= $_1$ =.node=
  62. =<comp'>= $_1$ =.inh= = =BinOp(StrLower, <comp'>.inh, <calc>.node)= \\
      =<comp'>.node= = =<comp'>= $_1$ =.node=
  63. =<comp'>= $_1$ =.inh= = =BinOp(StrGreater, <comp'>.inh, <calc>.node)= \\
      =<comp'>.node= = =<comp'>= $_1$ =.node=
  64. =<comp'>= $_1$ =.inh= = =BinOp(StrLowerEquals, <comp'>.inh, <calc>.node)= \\
      =<comp'>.node= = =<comp'>= $_1$ =.node=
  65. =<comp'>= $_1$ =.inh= = =BinOp(StrGreaterEquals, <comp'>.inh, <calc>.node)= \\
      =<comp'>.node= = =<comp'>= $_1$ =.node=
  66. =<comp'>.node= = =<comp'>.inh=
  67. =<calc'>.inh= = =<term>.node= \\
      =<calc>.node= = =<calc'>.node=
  68. =<calc'>= $_1$ =.inh= = =BinOp(Plus, <calc'>.inh, <term>.node)= \\
      =<calc'>.node= = =<calc'>= $_1$ =.node=
  69. =<calc'>= $_1$ =.inh= = =BinOp(Minus, <calc'>.inh, <term>.node)= \\
      =<calc'>.node= = =<calc'>= $_1$ =.node=
  70. =<calc'>= $_1$ =.inh= = =BinOp(Concat, <calc'>.inh, <term>.node)= \\
      =<calc'>.node= = =<calc'>= $_1$ =.node=
  71. =<calc'>.node= = =<calc'>.inh=
  72. =<term'>.inh= = =<factor>.node= \\
      =<term>.node= = =<term'>.node=
  73. =<term'>= $_1$ =.inh= = =BinOp(Times, <term'>.inh, <factor>)= \\
      =<term'>.node= = =<term'>= $_1$ =.node=
  74. =<term'>= $_1$ =.inh= = =BinOp(Divide, <term'>.inh, <factor>)= \\
      =<term'>.node= = =<term'>= $_1$ =.node=
  75. =<term'>.node= = =<term'>.inh=
  76. =<factor>.node= = =<simple expr>.node=
  77. =<factor>.node= = =UnOp(Not, <factor>= $_1$ =.node)=
  78. =<factor>.node= = =UnOp(UnaryPlus, <factor>= $_1$ =.node)=
  79. =<factor>.node= = =UnOp(UnaryMinus, <factor>= = $_1$ = =.node)=
  80. =<factor>.node= = =<expr>.node=

** Implementation
* Code generation \label{sec:Codegen}
The code generation step consists of converting the abstract syntax
tree to ARM assembly code.
** Implementation
